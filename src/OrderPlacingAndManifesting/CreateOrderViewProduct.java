/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OrderPlacingAndManifesting;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author Anuj Chandra
 */
public class CreateOrderViewProduct extends javax.swing.JFrame {

    /**
     * Creates new form CreateOrderViewProduct
     */
    public CreateOrderViewProduct() {
        initComponents();
        setVisible(true);
        try {
            AddProduct();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Lbl1 = new javax.swing.JLabel();
        ItemsCB = new javax.swing.JComboBox();
        GoBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        ConBtn = new javax.swing.JButton();
        CanBtn = new javax.swing.JButton();
        Lbl2 = new javax.swing.JLabel();
        Lbl3 = new javax.swing.JLabel();
        NameTF = new javax.swing.JTextField();
        Lbl4 = new javax.swing.JLabel();
        TypeTF = new javax.swing.JTextField();
        Lbl5 = new javax.swing.JLabel();
        DescriptionTF = new javax.swing.JTextField();
        Lbl6 = new javax.swing.JLabel();
        PriceTF = new javax.swing.JTextField();
        Lbl7 = new javax.swing.JLabel();
        NoItemsTF = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 100));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 500));

        Lbl1.setText("Select Item To Order");

        GoBtn.setText("Go");
        GoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoBtnActionPerformed(evt);
            }
        });

        ConBtn.setText("Confirm");
        ConBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConBtnActionPerformed(evt);
            }
        });

        CanBtn.setText("Cancel");
        CanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CanBtnActionPerformed(evt);
            }
        });

        Lbl2.setText("You Have Selected");

        Lbl3.setText("Name");

        NameTF.setEditable(false);

        Lbl4.setText("Type");

        TypeTF.setEditable(false);

        Lbl5.setText("Description");

        DescriptionTF.setEditable(false);

        Lbl6.setText("Price");

        PriceTF.setEditable(false);

        Lbl7.setText("No of Items to Order ");

        jMenu1.setText("File");

        jMenuItem1.setText("Back");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Help");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(CanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ConBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Lbl3)
                        .addGap(18, 18, 18)
                        .addComponent(NameTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Lbl4)
                        .addGap(18, 18, 18)
                        .addComponent(TypeTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Lbl5)
                        .addGap(18, 18, 18)
                        .addComponent(DescriptionTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Lbl6)
                        .addGap(18, 18, 18)
                        .addComponent(PriceTF))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Lbl1)
                                .addGap(18, 18, 18)
                                .addComponent(ItemsCB, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(GoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Lbl2))
                        .addGap(0, 86, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Lbl7)
                        .addGap(18, 18, 18)
                        .addComponent(NoItemsTF)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ItemsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GoBtn)
                    .addComponent(Lbl1))
                .addGap(33, 33, 33)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Lbl2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl3)
                    .addComponent(NameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl4)
                    .addComponent(TypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl5)
                    .addComponent(DescriptionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl6)
                    .addComponent(PriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl7)
                    .addComponent(NoItemsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConBtn)
                    .addComponent(CanBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoBtnActionPerformed
        try {
            selecteditem = ItemsCB.getSelectedItem().toString();
            PopulateTable(selecteditem);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_GoBtnActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        dispose();
        new CreateOrderView1();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String S = "HINT\nSelect an Item from Drop Down Menu and Review the Item. If you want to buy the Item, press Confirm to place Order";
        JOptionPane.showMessageDialog(this, S);         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        dispose();
        new MainView();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void CanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CanBtnActionPerformed
        dispose();
        new MainView();        // TODO add your handling code here:
    }//GEN-LAST:event_CanBtnActionPerformed

    private void ConBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConBtnActionPerformed
        ss = NoItemsTF.getText();
        String regex = "[0-9]+";
        if (ss.isEmpty()) {
            scc = "ERROR : Please Specify Number Of Items You Want To Order.";
            JOptionPane.showMessageDialog(rootPane, scc);
        }
        else if(ss.matches(regex) == false){
            scc = "ERROR : Please Enter Only Numeric Values In The Field.";
            JOptionPane.showMessageDialog(rootPane, scc);
        }
        else {
            try {
                AddManifest();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_ConBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CanBtn;
    private javax.swing.JButton ConBtn;
    private javax.swing.JTextField DescriptionTF;
    private javax.swing.JButton GoBtn;
    private javax.swing.JComboBox ItemsCB;
    private javax.swing.JLabel Lbl1;
    private javax.swing.JLabel Lbl2;
    private javax.swing.JLabel Lbl3;
    private javax.swing.JLabel Lbl4;
    private javax.swing.JLabel Lbl5;
    private javax.swing.JLabel Lbl6;
    private javax.swing.JLabel Lbl7;
    private javax.swing.JTextField NameTF;
    private javax.swing.JTextField NoItemsTF;
    private javax.swing.JTextField PriceTF;
    private javax.swing.JTextField TypeTF;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    private static String selecteditem = "";
    private static String res1 = "", res2 = "", res3 = "", res4 = "", Pickup_City = "", Cost = "";
    private static final String DB_DRIVER = "oracle.jdbc.driver.OracleDriver";
    private static final String DB_CONNECTION = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String DB_USER = "is020";
    private static final String DB_PASSWORD = "is020";
    boolean avail = false;
    String Customer_FName = "";
    String Customer_LName = "";
    String Customer_MobileNumber = "";
    String Customer_Address = "";
    String Customer_City = "";
    int Customer_Priority = 0;
    String temp, temp1, Order_ID = "", _1 = "", _2 = "", _3 = "", _4 = "", _5 = "", InsertManifestSQL, scc, UpdateManifestSQL,ss;
    int available = 0, available_arr[] = {0, 0, 0, 0, 0}, i = 0, j = 2, max = 0;

    private void AddProduct() throws SQLException {
        Connection dbConnection = null;
        Statement statement = null;
        String selectTableSQL = "select product_id from product";
        try {
            dbConnection = getDBConnection();
            System.out.println("Connection Successful");
            statement = dbConnection.createStatement();
            System.out.println(selectTableSQL);
            ResultSet rs = statement.executeQuery(selectTableSQL);
            while (rs.next()) {
                ItemsCB.addItem(rs.getString(1));
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            if (statement != null) {
                statement.close();
            }
            if (dbConnection != null) {
                dbConnection.close();
            }
        }
    }

    private void PopulateTable(String selecteditem) throws SQLException {
        System.out.println(selecteditem);
        Connection dbConnection = null;
        Statement statement = null;
        String selectTableSQL = "select * from product where product_id = '" + selecteditem + "'";
        try {
            dbConnection = getDBConnection();
            System.out.println("Connection Successful");
            statement = dbConnection.createStatement();
            System.out.println(selectTableSQL);
            ResultSet rs = statement.executeQuery(selectTableSQL);
            while (rs.next()) {
                res1 = rs.getString("product_name");
                res2 = rs.getString("product_type");
                res3 = rs.getString("product_description");
                res4 = rs.getString("product_price");
            }
            System.out.println(res1 + "\n" + res2 + "\n" + res3 + "\n" + res4 + "\n");
            NameTF.setText(res1);
            TypeTF.setText(res2);
            DescriptionTF.setText(res3);
            PriceTF.setText(res4);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            if (statement != null) {
                statement.close();
            }
            if (dbConnection != null) {
                dbConnection.close();
            }
        }
    }

    private void AddManifest() throws SQLException {
        Connection dbConnection = null;
        Statement statement = null;
        String UID = CreateOrderView1.USERIDStr;
        String selectTableSQLcustomer = "select first_name , last_name , mobile_number, address , city , priority from customer where username = '" + UID + "'";
        System.out.println("Printed From Add Manifest Function. \n" + selecteditem + "\n" + res1 + "\n" + res4);

        try {
            dbConnection = getDBConnection();
            System.out.println("Connection Successful");
            statement = dbConnection.createStatement();
            System.out.println(selectTableSQLcustomer);
            ResultSet rs = statement.executeQuery(selectTableSQLcustomer), rs1, rs2, rs3;

            while (rs.next()) {
                Customer_FName = rs.getString(1);
                System.out.println(Customer_FName);
                Customer_LName = rs.getString(2);
                System.out.println(Customer_LName);
                Customer_MobileNumber = rs.getString(3);
                System.out.println(Customer_MobileNumber);
                Customer_Address = rs.getString(4);
                System.out.println(Customer_Address);
                Customer_City = rs.getString(5);
                System.out.println(Customer_City);
                Customer_Priority = rs.getInt(6);
                System.out.println(Customer_Priority);
            }
            try {
                avail = CheckAvailability(NoItemsTF.getText());
                System.out.println("No Of Items Is Passed As : " + NoItemsTF.getText());

                if (avail == false) {
                    scc = "ERROR : Number of Products Specified Are Not Available in the warehouse.\nPlease Give a Smaller Value";
                    JOptionPane.showMessageDialog(rootPane, scc);

                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }

            if (avail == true) {
                String selectTableSQL11 = "select warehouse_city,flight_cost "
                        + "from cost where to_city = '" + Customer_City + "' and flight_cost in "
                        + "(select min(flight_cost) from cost where to_city = '"
                        + Customer_City + "')";
                String selectTableSQL12 = "select warehouse_city,train_cost "
                        + "from cost where to_city = '" + Customer_City + "' and train_cost in "
                        + "(select min(train_cost) from cost where to_city = '"
                        + Customer_City + "')";
                String selectTableSQL13 = "select warehouse_city,distance "
                        + "from cost where to_city = '" + Customer_City + "' and distance in "
                        + "(select min(distance) from cost where to_city = '"
                        + Customer_City + "')";

                switch (Customer_Priority) {
                    case 1:
                        System.out.println("Priority 1 Executing.");
                        System.out.println(selectTableSQL11);
                        rs1 = statement.executeQuery(selectTableSQL11);
                        while (rs1.next()) {
                            Pickup_City = rs1.getString(1);
                            System.out.println(Pickup_City);
                            Cost = rs1.getString(2);
                            System.out.println(Cost);
                            System.out.println("Query 1 Priority 1 Execution Complete");
                        }
                        temp = "select " + Pickup_City + " from availability where product_id = '" + selecteditem + "'";
                        System.out.println(temp);
                        rs2 = statement.executeQuery(temp);
                        while (rs2.next()) {
                            available = rs2.getInt(1);
                            System.out.println("Product " + selecteditem + " has Units : " + available);
                        }
                        if (available == 0) {
                            temp1 = "select * from availability where product_id = '" + selecteditem + "'";
                            System.out.println("Available Units in " + Pickup_City + " was Found 0. Enter If Condition");
                            System.out.println(temp1);
                            rs3 = statement.executeQuery(temp1);
                            while (rs3.next()) {
                                available_arr[i] = rs3.getInt(j);
                                i++;
                                j++;
                            }
                            j = 0;
                            for (i = 0; i < 5; i++) {
                                if (available_arr[i] > max) {
                                    max = available_arr[i];
                                    j = i;
                                }
                            }
                            available = max;
                            switch (j) {
                                case 0:
                                    Pickup_City = "delhi";
                                    break;
                                case 1:
                                    Pickup_City = "mumbai";
                                    break;
                                case 2:
                                    Pickup_City = "bangalore";
                                    break;
                                case 3:
                                    Pickup_City = "patna";
                                    break;
                                case 4:
                                    Pickup_City = "hyderabad";
                                    break;
                            }
                        }

                        System.out.println("New Available Units Outside Loop : " + available);

                        _1 = Customer_FName.substring(0, 2);
                        _2 = Customer_LName.substring(0, 2);
                        _3 = selecteditem.substring(0, 3);
                        _4 = Pickup_City.substring(0, 2);
                        _5 = Customer_City.substring(0, 2);
                        Order_ID = _1 + _2 + _3 + _4 + _5;
                        System.out.println("Generated Order Id is  : " + Order_ID);

                        InsertManifestSQL = "insert into consignment values "
                                + "( '" + Order_ID
                                + "','" + Customer_FName
                                + "','" + Customer_LName
                                + "'," + Customer_MobileNumber
                                + ",'" + Customer_Address
                                + "','" + Pickup_City
                                + "','" + Customer_City
                                + "'," + res4
                                + ",'" + selecteditem
                                + "','" + res1
                                + "')";
                        available = available - Integer.parseInt(NoItemsTF.getText());
                        UpdateManifestSQL = "update availability set "
                                + Pickup_City + " = "
                                + available + " where product_id = '"
                                + selecteditem + "'";
                        System.out.println(InsertManifestSQL);
                        System.out.println("Begin Insert Sequence. ");
                        statement.executeUpdate(InsertManifestSQL);
                        System.out.println("SUCCESS : Manifest Generated.");
                        System.out.println(UpdateManifestSQL);
                        System.out.println("Begin Update Sequence");
                        statement.executeUpdate(UpdateManifestSQL);
                        scc = "SUCCESS : Order Generated. Order Number Is: " + Order_ID + ".\nPlease Find Details in Manifest.";
                        JOptionPane.showMessageDialog(rootPane, scc);
                        break;
                    case 2:
                        System.out.println("Priority 2 Executing.");
                        System.out.println(selectTableSQL12);
                        rs1 = statement.executeQuery(selectTableSQL12);
                        while (rs1.next()) {
                            Pickup_City = rs1.getString(1);
                            System.out.println(Pickup_City);
                            Cost = rs1.getString(2);
                            System.out.println(Cost);
                            System.out.println("Query 1 Priority 2 Execution Complete");
                        }
                        temp1 = "select " + Pickup_City + " from availability where product_id = '" + selecteditem + "'";
                        System.out.println(temp1);
                        rs2 = statement.executeQuery(temp1);
                        while (rs2.next()) {
                            available = rs2.getInt(1);
                            System.out.println("Product " + selecteditem + " has Units : " + available);
                            System.out.println("Query 2 Priority 2 Execution Complete");
                        }
                        if (available == 0) {
                            temp1 = "select * from availability where product_id = '" + selecteditem + "'";
                            System.out.println("Available Units in " + Pickup_City + " was Found 0. Enter If Condition");
                            System.out.println(temp1);
                            rs3 = statement.executeQuery(temp1);
                            while (rs3.next()) {
                                available_arr[i] = rs3.getInt(j);
                                i++;
                                j++;
                            }
                            j = 0;
                            for (i = 0; i < 5; i++) {
                                if (available_arr[i] > max) {
                                    max = available_arr[i];
                                    j = i;
                                }
                            }
                            available = max;
                            switch (j) {
                                case 0:
                                    Pickup_City = "delhi";
                                    break;
                                case 1:
                                    Pickup_City = "mumbai";
                                    break;
                                case 2:
                                    Pickup_City = "bangalore";
                                    break;
                                case 3:
                                    Pickup_City = "patna";
                                    break;
                                case 4:
                                    Pickup_City = "hyderabad";
                                    break;
                            }
                        }

                        System.out.println("New Available Units Outside Loop : " + available);

                        _1 = Customer_FName.substring(0, 2);
                        _2 = Customer_LName.substring(0, 2);
                        _3 = selecteditem.substring(0, 3);
                        _4 = Pickup_City.substring(0, 2);
                        _5 = Customer_City.substring(0, 2);
                        Order_ID = _1 + _2 + _3 + _4 + _5;
                        System.out.println("Generated Order Id is  : " + Order_ID);

                        InsertManifestSQL = "insert into consignment values "
                                + "( '" + Order_ID
                                + "','" + Customer_FName
                                + "','" + Customer_LName
                                + "'," + Customer_MobileNumber
                                + ",'" + Customer_Address
                                + "','" + Pickup_City
                                + "','" + Customer_City
                                + "'," + Cost
                                + ",'" + selecteditem
                                + "','" + res1
                                + "')";
                        available = available - Integer.parseInt(NoItemsTF.getText());
                        UpdateManifestSQL = "update availability set "
                                + Pickup_City + " = "
                                + available + " where product_id = '"
                                + selecteditem + "'";
                        System.out.println(InsertManifestSQL);
                        System.out.println("Begin Insert Sequence. ");
                        statement.executeUpdate(InsertManifestSQL);
                        System.out.println("SUCCESS : Manifest Generated.");
                        System.out.println(UpdateManifestSQL);
                        System.out.println("Begin Update Sequence");
                        statement.executeUpdate(UpdateManifestSQL);
                        scc = "SUCCESS : Order Generated. Order Number Is: " + Order_ID + ".\nPlease Find Details in Manifest.";
                        JOptionPane.showMessageDialog(rootPane, scc);
                        break;
                    case 3:
                        System.out.println("Priority 3 Executing.");
                        System.out.println(selectTableSQL13);
                        rs1 = statement.executeQuery(selectTableSQL13);
                        while (rs1.next()) {
                            Pickup_City = rs1.getString(1);
                            System.out.println(Pickup_City);
                            Cost = rs1.getString(2);
                            System.out.println(Cost);
                            System.out.println("Query 1 Priority 3 Execution Complete");
                        }
                        temp1 = "select " + Pickup_City + " from availability where product_id = '" + selecteditem + "'";
                        System.out.println(temp1);
                        rs2 = statement.executeQuery(temp1);

                        while (rs2.next()) {
                            available = rs2.getInt(1);
                            System.out.println("Product " + selecteditem + " has Units : " + available);
                            System.out.println("Query 2 Priority 3 Execution Complete");
                        }
                        if (available == 0) {
                            temp1 = "select * from availability where product_id = '" + selecteditem + "'";
                            System.out.println("Available Units in " + Pickup_City + " was Found 0. Enter If Condition");
                            System.out.println(temp1);
                            rs3 = statement.executeQuery(temp1);
                            while (rs3.next()) {
                                available_arr[i] = rs3.getInt(j);
                                i++;
                                j++;
                            }
                            j = 0;
                            for (i = 0; i < 5; i++) {
                                if (available_arr[i] > max) {
                                    max = available_arr[i];
                                    j = i;
                                }
                            }
                            available = max;
                            switch (j) {
                                case 0:
                                    Pickup_City = "delhi";
                                    break;
                                case 1:
                                    Pickup_City = "mumbai";
                                    break;
                                case 2:
                                    Pickup_City = "bangalore";
                                    break;
                                case 3:
                                    Pickup_City = "patna";
                                    break;
                                case 4:
                                    Pickup_City = "hyderabad";
                                    break;
                            }
                        }

                        System.out.println("New Available Units Outside Loop : " + available);

                        _1 = Customer_FName.substring(0, 2);
                        _2 = Customer_LName.substring(0, 2);
                        _3 = selecteditem.substring(0, 3);
                        _4 = Pickup_City.substring(0, 2);
                        _5 = Customer_City.substring(0, 2);
                        Order_ID = _1 + _2 + _3 + _4 + _5;
                        System.out.println("Generated Order Id is  : " + Order_ID);

                        InsertManifestSQL = "insert into consignment values "
                                + "( '" + Order_ID
                                + "','" + Customer_FName
                                + "','" + Customer_LName
                                + "'," + Customer_MobileNumber
                                + ",'" + Customer_Address
                                + "','" + Pickup_City
                                + "','" + Customer_City
                                + "'," + Cost
                                + ",'" + selecteditem
                                + "','" + res1
                                + "')";
                        available = available - Integer.parseInt(NoItemsTF.getText());
                        UpdateManifestSQL = "update availability set "
                                + Pickup_City + " = "
                                + available + " where product_id = '"
                                + selecteditem + "'";
                        System.out.println(InsertManifestSQL);
                        System.out.println("Begin Insert Sequence. ");
                        statement.executeUpdate(InsertManifestSQL);
                        System.out.println("SUCCESS : Manifest Generated.");
                        System.out.println(UpdateManifestSQL);
                        System.out.println("Begin Update Sequence");
                        statement.executeUpdate(UpdateManifestSQL);
                        scc = "SUCCESS : Order Generated. Order Number Is: " + Order_ID + ".\nPlease Find Details in Manifest.";
                        JOptionPane.showMessageDialog(rootPane, scc);
                        break;
                    default:
                        System.out.println("ERROR : Customer Priority was Not extracted.");
                }
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            if (statement != null) {
                statement.close();
            }
            if (dbConnection != null) {
                dbConnection.close();
            }
        }
    }

    private static Connection getDBConnection() {
        Connection dbConnection = null;
        try {
            Class.forName(DB_DRIVER);
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }
        try {
            dbConnection = DriverManager.getConnection(DB_CONNECTION, DB_USER,
                    DB_PASSWORD);
            return dbConnection;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return dbConnection;
    }

    private boolean CheckAvailability(String s) throws SQLException {
        Connection dbConnection = null;
        Statement statement = null;

        int available = Integer.parseInt(s);
        boolean avail1 = false;
        System.out.println("Requested Units : " + available);
        String selectTableSQL = "select * from availability where product_id ='" + selecteditem + "'";
        i = 2;
        try {
            dbConnection = getDBConnection();
            System.out.println("Connection Successful");
            statement = dbConnection.createStatement();
            System.out.println(selectTableSQL);
            ResultSet rs = statement.executeQuery(selectTableSQL);
            while (rs.next()) {
                if (available <= rs.getInt(i)) {
                    avail1 = true;
                    i++;
                } else {
                    avail1 = false;
                }
            }
            return avail1;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            if (statement != null) {
                statement.close();
            }
            if (dbConnection != null) {
                dbConnection.close();
            }
        }
        return false;
    }

}
